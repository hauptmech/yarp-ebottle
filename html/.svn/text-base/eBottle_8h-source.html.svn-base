<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>URUS: eBottle.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.1 -->
<div class="tabs">
  <ul>
    <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.html"><span>Namespaces</span></a></li>
    <li><a href="annotated.html"><span>Classes</span></a></li>
    <li id="current"><a href="files.html"><span>Files</span></a></li>
  </ul></div>
<h1>eBottle.h</h1><a href="eBottle_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*------------------------------------------------------------------------</span>
<a name="l00002"></a>00002 <span class="comment"> *  Copyright (C) 2000-2008, Universidad de Zaragoza, SPAIN</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> *  Contact Addresses: Danilo Tardioli                   dantard@unizar.es</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> *  eBottle is free software;  you can redistribute it and/or modify it </span>
<a name="l00007"></a>00007 <span class="comment"> *  under the terms of the GNU General Public License as published by the</span>
<a name="l00008"></a>00008 <span class="comment"> *  Free Software Foundation;  either version 2, or (at your option) any</span>
<a name="l00009"></a>00009 <span class="comment"> *  later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> *  eBottle is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> *  WITHOUT ANY WARRANTY;  without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> *  General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> *  You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> *  distributed with eBottle; see file COPYING. If not,  write to the</span>
<a name="l00018"></a>00018 <span class="comment"> *  Free Software  Foundation, 59 Temple Place - Suite 330, Boston, MA</span>
<a name="l00019"></a>00019 <span class="comment"> *  02111-1307, USA.</span>
<a name="l00020"></a>00020 <span class="comment"> *</span>
<a name="l00021"></a>00021 <span class="comment"> *  As a special exception, if you link this unit with other files to</span>
<a name="l00022"></a>00022 <span class="comment"> *  produce an executable, this unit does not by itself cause the resulting </span>
<a name="l00023"></a>00023 <span class="comment"> *  executable to be covered by the GNU General Public License.  This </span>
<a name="l00024"></a>00024 <span class="comment"> *  exception does not however invalidate any other reasons why the</span>
<a name="l00025"></a>00025 <span class="comment"> *  executable file might be covered by the GNU Public License.</span>
<a name="l00026"></a>00026 <span class="comment"> *</span>
<a name="l00027"></a>00027 <span class="comment"> *-------------------------------------------------------------------------*/</span>
<a name="l00028"></a>00028 
<a name="l00048"></a>00048 <span class="preprocessor">#ifndef YARPBOTTLE_H_</span>
<a name="l00049"></a>00049 <span class="preprocessor"></span><span class="preprocessor">#define YARPBOTTLE_H_</span>
<a name="l00050"></a>00050 <span class="preprocessor"></span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &lt;yarp/os/all.h&gt;</span>
<a name="l00052"></a>00052 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00053"></a>00053 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00055"></a>00055 
<a name="l00061"></a><a class="code" href="namespaceyarp.html">00061</a> <span class="keyword">namespace </span>yarp {
<a name="l00062"></a>00062 
<a name="l00068"></a><a class="code" href="namespaceyarp_1_1os.html">00068</a>         <span class="keyword">namespace </span>os {
<a name="l00069"></a>00069 
<a name="l00070"></a>00070                 <span class="keyword">class </span><a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a>;
<a name="l00071"></a>00071 
<a name="l00080"></a><a class="code" href="classyarp_1_1os_1_1eValue.html">00080</a>                 <span class="keyword">class </span><a class="code" href="classyarp_1_1os_1_1eValue.html">eValue</a> {
<a name="l00081"></a>00081                         <span class="keyword">public</span>:
<a name="l00087"></a><a class="code" href="classyarp_1_1os_1_1eValue.html#2cda16e74cbc50afd893c0460f404618">00087</a>                                 <span class="keyword">enum</span> <a class="code" href="classyarp_1_1os_1_1eValue.html#2cda16e74cbc50afd893c0460f404618">ValueType</a> {
<a name="l00088"></a>00088                                         <a class="code" href="classyarp_1_1os_1_1eValue.html#2cda16e74cbc50afd893c0460f40461892be5bd326377a5c2bd2e9a27a45b01c">INT</a> = 1, 
<a name="l00089"></a>00089                                         <a class="code" href="classyarp_1_1os_1_1eValue.html#2cda16e74cbc50afd893c0460f4046180ed582934f0889785d166ffeb48bda80">DOUBLE</a>, 
<a name="l00090"></a>00090                                         <a class="code" href="classyarp_1_1os_1_1eValue.html#2cda16e74cbc50afd893c0460f40461808bac2867ea2504f919793cff5c48c50">CHARP</a>, 
<a name="l00091"></a>00091                                         <a class="code" href="classyarp_1_1os_1_1eValue.html#2cda16e74cbc50afd893c0460f4046188462da5e2db17959cdaffc8a7b8f3273">BOTTLE</a>, 
<a name="l00092"></a><a class="code" href="classyarp_1_1os_1_1eValue.html#2cda16e74cbc50afd893c0460f404618e5840b841dddc84eec42020b83ac1327">00092</a>                                         <a class="code" href="classyarp_1_1os_1_1eValue.html#2cda16e74cbc50afd893c0460f404618e5840b841dddc84eec42020b83ac1327">STRING</a> 
<a name="l00093"></a>00093                                 };
<a name="l00094"></a>00094 
<a name="l00095"></a>00095                         <span class="keyword">public</span>:
<a name="l00096"></a>00096 
<a name="l00108"></a>00108                                 <span class="keyword">static</span> <a class="code" href="classyarp_1_1os_1_1eValue.html">eValue</a>
<a name="l00109"></a>00109                                                 * <a class="code" href="classyarp_1_1os_1_1eValue.html#cad11c2022633f1f40641003abea21ab">makeBlob</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* p, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size);
<a name="l00110"></a>00110 
<a name="l00116"></a>00116                                 <a class="code" href="classyarp_1_1os_1_1eValue.html#22b87b2af636f5bf64c715a5bb2f266a">eValue</a>();
<a name="l00117"></a>00117 
<a name="l00124"></a>00124                                 <a class="code" href="classyarp_1_1os_1_1eValue.html#22b87b2af636f5bf64c715a5bb2f266a">eValue</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> i);
<a name="l00125"></a>00125 
<a name="l00132"></a>00132                                 <a class="code" href="classyarp_1_1os_1_1eValue.html#22b87b2af636f5bf64c715a5bb2f266a">eValue</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> d);
<a name="l00133"></a>00133 
<a name="l00143"></a>00143                                 <a class="code" href="classyarp_1_1os_1_1eValue.html#22b87b2af636f5bf64c715a5bb2f266a">eValue</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * p, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size_p);
<a name="l00144"></a>00144 
<a name="l00152"></a>00152                                 <a class="code" href="classyarp_1_1os_1_1eValue.html#22b87b2af636f5bf64c715a5bb2f266a">eValue</a>(<span class="keyword">const</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> * p);
<a name="l00153"></a>00153 
<a name="l00160"></a>00160                                 <a class="code" href="classyarp_1_1os_1_1eValue.html#22b87b2af636f5bf64c715a5bb2f266a">eValue</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * text);
<a name="l00161"></a>00161 
<a name="l00169"></a>00169                                 <a class="code" href="classyarp_1_1os_1_1eValue.html#22b87b2af636f5bf64c715a5bb2f266a">eValue</a>(<span class="keyword">const</span> std::string&amp; s);
<a name="l00170"></a>00170 
<a name="l00176"></a>00176                                 <a class="code" href="classyarp_1_1os_1_1eValue.html#2b96cabf0cf5df00f8cb701dc943192c">~eValue</a>();
<a name="l00177"></a>00177 
<a name="l00183"></a>00183                                 <a class="code" href="classyarp_1_1os_1_1eValue.html">eValue</a> &amp; <a class="code" href="classyarp_1_1os_1_1eValue.html#da4d70d78498ce6f31c5e8d2afad616a">operator=</a>(<span class="keyword">const</span> <a class="code" href="classyarp_1_1os_1_1eValue.html">eValue</a> &amp; p);
<a name="l00184"></a>00184 
<a name="l00190"></a>00190                                 <a class="code" href="classyarp_1_1os_1_1eValue.html#2cda16e74cbc50afd893c0460f404618">ValueType</a> <a class="code" href="classyarp_1_1os_1_1eValue.html#7830e1931fb9afc2c14ae9bca626d01a">getType</a>() <span class="keyword">const</span>;
<a name="l00191"></a>00191 
<a name="l00197"></a>00197                                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classyarp_1_1os_1_1eValue.html#0a32acd38b50f0d4fe47506bcb9ea9d0">getSize</a>() <span class="keyword">const</span>;
<a name="l00198"></a>00198 
<a name="l00204"></a>00204                                 <span class="keywordtype">bool</span> <a class="code" href="classyarp_1_1os_1_1eValue.html#6c2607c2ad466dc099e2787214d754c1">isInt</a>() <span class="keyword">const</span>;
<a name="l00205"></a>00205 
<a name="l00211"></a>00211                                 <span class="keywordtype">bool</span> <a class="code" href="classyarp_1_1os_1_1eValue.html#a975d1852e97c17b165abedca6364b86">isDouble</a>() <span class="keyword">const</span>;
<a name="l00212"></a>00212 
<a name="l00218"></a>00218                                 <span class="keywordtype">bool</span> <a class="code" href="classyarp_1_1os_1_1eValue.html#20872779bcdfd759da9a2ae150a79d9c">isBlob</a>() <span class="keyword">const</span>;
<a name="l00219"></a>00219 
<a name="l00225"></a>00225                                 <span class="keywordtype">bool</span> <a class="code" href="classyarp_1_1os_1_1eValue.html#7cebd691311a9277af0b1596708a1743">isList</a>() <span class="keyword">const</span>;
<a name="l00226"></a>00226 
<a name="l00232"></a>00232                                 <span class="keywordtype">bool</span> <a class="code" href="classyarp_1_1os_1_1eValue.html#08cc955229818cba8068bbb174776385">isString</a>() <span class="keyword">const</span>;
<a name="l00233"></a>00233 
<a name="l00239"></a>00239                                 <span class="keywordtype">int</span> <a class="code" href="classyarp_1_1os_1_1eValue.html#34e32b6520d905e21105189fe56dfa2e">asInt</a>() <span class="keyword">const</span>;
<a name="l00240"></a>00240 
<a name="l00246"></a>00246                                 <span class="keywordtype">int</span>* <a class="code" href="classyarp_1_1os_1_1eValue.html#03b585cc6fcc343e7f5c940395611fac">asIntPtr</a>();
<a name="l00247"></a>00247 
<a name="l00253"></a>00253                                 <span class="keywordtype">int</span>* <a class="code" href="classyarp_1_1os_1_1eValue.html#03b585cc6fcc343e7f5c940395611fac">asIntPtr</a>() <span class="keyword">const</span>;
<a name="l00254"></a>00254 
<a name="l00260"></a>00260                                 <span class="keywordtype">double</span> <a class="code" href="classyarp_1_1os_1_1eValue.html#0db3d0883aa41e73e4f04a06f243721a">asDouble</a>() <span class="keyword">const</span>;
<a name="l00261"></a>00261 
<a name="l00267"></a>00267                                 <span class="keywordtype">double</span>* <a class="code" href="classyarp_1_1os_1_1eValue.html#2dde8a69783808e7d22a90a5b5c6f694">asDoublePtr</a>();
<a name="l00268"></a>00268 
<a name="l00274"></a>00274                                 <span class="keywordtype">double</span>* <a class="code" href="classyarp_1_1os_1_1eValue.html#2dde8a69783808e7d22a90a5b5c6f694">asDoublePtr</a>() <span class="keyword">const</span>;
<a name="l00275"></a>00275 
<a name="l00281"></a>00281                                 <span class="keywordtype">char</span> * <a class="code" href="classyarp_1_1os_1_1eValue.html#5a1ae546097be5c856c71b68df43fb69">asBlob</a>();
<a name="l00282"></a>00282 
<a name="l00288"></a>00288                                 <span class="keywordtype">char</span> * <a class="code" href="classyarp_1_1os_1_1eValue.html#5a1ae546097be5c856c71b68df43fb69">asBlob</a>() <span class="keyword">const</span>;
<a name="l00289"></a>00289 
<a name="l00295"></a>00295                                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classyarp_1_1os_1_1eValue.html#dbd0ac6a63ecf8261125b19f594c9eb0">asBlobLength</a>() <span class="keyword">const</span>;
<a name="l00296"></a>00296 
<a name="l00302"></a>00302                                 <a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> * <a class="code" href="classyarp_1_1os_1_1eValue.html#93fe94453caee341037a6c77a4ec72be">asList</a>();
<a name="l00303"></a>00303 
<a name="l00309"></a>00309                                 <a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> * <a class="code" href="classyarp_1_1os_1_1eValue.html#93fe94453caee341037a6c77a4ec72be">asList</a>() <span class="keyword">const</span>;
<a name="l00310"></a>00310 
<a name="l00316"></a>00316                                 ConstString <a class="code" href="classyarp_1_1os_1_1eValue.html#34d73a98b3c6bb25b9a763d911c7f606">asString</a>() <span class="keyword">const</span>;
<a name="l00317"></a>00317 
<a name="l00323"></a>00323                                 ConstString* <a class="code" href="classyarp_1_1os_1_1eValue.html#3cf5108d8bb5ef67359a9d74513678f3">asStringPtr</a>();
<a name="l00324"></a>00324 
<a name="l00330"></a>00330                                 ConstString* <a class="code" href="classyarp_1_1os_1_1eValue.html#3cf5108d8bb5ef67359a9d74513678f3">asStringPtr</a>() <span class="keyword">const</span>;
<a name="l00331"></a>00331 
<a name="l00332"></a>00332                         <span class="keyword">private</span>:
<a name="l00333"></a>00333                                 <a class="code" href="classyarp_1_1os_1_1eValue.html#2cda16e74cbc50afd893c0460f404618">ValueType</a> type;
<a name="l00334"></a>00334                                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size;
<a name="l00335"></a>00335                                 <span class="keywordtype">void</span> * value;
<a name="l00336"></a>00336                 };
<a name="l00337"></a>00337 
<a name="l00351"></a><a class="code" href="classyarp_1_1os_1_1eBottle.html">00351</a>                 <span class="keyword">class </span><a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> : <span class="keyword">public</span> yarp::os::Portable {
<a name="l00352"></a>00352                         <span class="keyword">public</span>:
<a name="l00358"></a>00358                                 <a class="code" href="classyarp_1_1os_1_1eBottle.html#a1d4b342a40a94bfe6df8509e11c0e5d">eBottle</a>();
<a name="l00359"></a>00359 
<a name="l00368"></a>00368                                 <a class="code" href="classyarp_1_1os_1_1eBottle.html#a1d4b342a40a94bfe6df8509e11c0e5d">eBottle</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * txt);
<a name="l00369"></a>00369 
<a name="l00378"></a>00378                                 <a class="code" href="classyarp_1_1os_1_1eBottle.html#a1d4b342a40a94bfe6df8509e11c0e5d">eBottle</a>(<span class="keyword">const</span> std::string&amp; s);
<a name="l00379"></a>00379 
<a name="l00388"></a>00388                                 <a class="code" href="classyarp_1_1os_1_1eBottle.html#a1d4b342a40a94bfe6df8509e11c0e5d">eBottle</a>(<span class="keyword">const</span> ConstString&amp; s);
<a name="l00389"></a>00389 
<a name="l00397"></a>00397                                 <a class="code" href="classyarp_1_1os_1_1eBottle.html#a1d4b342a40a94bfe6df8509e11c0e5d">eBottle</a>(<span class="keyword">const</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> &amp; eb);
<a name="l00398"></a>00398 
<a name="l00404"></a>00404                                 <span class="keyword">virtual</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#e4bf49fdd009c882b2ca8c7c9f5f035f">~eBottle</a>();
<a name="l00405"></a>00405 
<a name="l00413"></a>00413                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#10c1bb83ac0949e4627268c74f7a9814">copy</a>(<span class="keyword">const</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> *p);
<a name="l00414"></a>00414 
<a name="l00422"></a>00422                                 <a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> &amp; <a class="code" href="classyarp_1_1os_1_1eBottle.html#c9cb31618da219dba1e4d4464994c62e">operator=</a>(<span class="keyword">const</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> &amp; p);
<a name="l00423"></a>00423 
<a name="l00427"></a>00427                                 <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#8dcf4961846633cfa22ef54f45a54723">clear</a>();
<a name="l00428"></a>00428 
<a name="l00434"></a>00434                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#94f495ed83e48f19087c1746e70cab9a">add</a>(<span class="keyword">const</span> <a class="code" href="classyarp_1_1os_1_1eValue.html">eValue</a> * e);
<a name="l00435"></a>00435 
<a name="l00441"></a>00441                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#94f495ed83e48f19087c1746e70cab9a">add</a>(<span class="keyword">const</span> <a class="code" href="classyarp_1_1os_1_1eValue.html">eValue</a> &amp; e);
<a name="l00442"></a>00442 
<a name="l00448"></a>00448                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#affd841cb2ab0b53230887e934edee1e">addInt</a>(<span class="keyword">const</span> <span class="keywordtype">int</span> i);
<a name="l00449"></a>00449 
<a name="l00455"></a>00455                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#1ed80b390acf85bb55d2850ebb0cbfe9">addDouble</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> d);
<a name="l00456"></a>00456 
<a name="l00464"></a>00464                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#a883b3ef36c2be3e0ee9c5592357427d">addBlob</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * q, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#939ca003fac83fdab7479cd9846f1421">size</a>);
<a name="l00465"></a>00465 
<a name="l00471"></a>00471                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#c764a5c9c38ffafd577b84bd3c4d354d">addString</a>(<span class="keyword">const</span> std::string&amp; s);
<a name="l00472"></a>00472 
<a name="l00478"></a>00478                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#c764a5c9c38ffafd577b84bd3c4d354d">addString</a>(<span class="keyword">const</span> ConstString&amp; s);
<a name="l00479"></a>00479 
<a name="l00486"></a>00486                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#c764a5c9c38ffafd577b84bd3c4d354d">addString</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * s);
<a name="l00487"></a>00487 
<a name="l00493"></a>00493                                 <a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> &amp; <a class="code" href="classyarp_1_1os_1_1eBottle.html#286a7fe016a4cf5be3230b1f225bfb53">addList</a>();
<a name="l00494"></a>00494 
<a name="l00500"></a>00500                                 <a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> * <a class="code" href="classyarp_1_1os_1_1eBottle.html#f4dba1dfaecbaaae2311d93f218eafa7">addListPtr</a>();
<a name="l00501"></a>00501 
<a name="l00508"></a>00508                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#4940056abac86de5045c68a400f98a83">insert</a>(<span class="keyword">const</span> <a class="code" href="classyarp_1_1os_1_1eValue.html">eValue</a>* p, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i);
<a name="l00509"></a>00509 
<a name="l00516"></a>00516                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#fd1abf4e44b360ac802ccff441e9d2b7">append</a>(<span class="keyword">const</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> &amp; yb);
<a name="l00517"></a>00517 
<a name="l00523"></a>00523                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#5ab59437e6db5692d840021c0ffc2616">remove</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i);
<a name="l00524"></a>00524 
<a name="l00530"></a>00530                                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#01a91aed7e769301b6c1e1de2e12bb5d">count</a>() <span class="keyword">const</span>;
<a name="l00531"></a>00531 
<a name="l00537"></a>00537                                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#939ca003fac83fdab7479cd9846f1421">size</a>() <span class="keyword">const</span>;
<a name="l00538"></a>00538 
<a name="l00545"></a>00545                                 <a class="code" href="classyarp_1_1os_1_1eValue.html">eValue</a> &amp; <a class="code" href="classyarp_1_1os_1_1eBottle.html#96e80839849913cdb7f1352cc0395a4c">operator[]</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i);
<a name="l00546"></a>00546 
<a name="l00553"></a>00553                                 <a class="code" href="classyarp_1_1os_1_1eValue.html">eValue</a> &amp; <a class="code" href="classyarp_1_1os_1_1eBottle.html#96e80839849913cdb7f1352cc0395a4c">operator[]</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;
<a name="l00554"></a>00554 
<a name="l00561"></a>00561                                 <a class="code" href="classyarp_1_1os_1_1eValue.html">eValue</a> &amp; <a class="code" href="classyarp_1_1os_1_1eBottle.html#c88e920577ea17bfc3f63d350cd6c4fc">get</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i);
<a name="l00562"></a>00562 
<a name="l00569"></a>00569                                 <a class="code" href="classyarp_1_1os_1_1eValue.html">eValue</a> &amp; <a class="code" href="classyarp_1_1os_1_1eBottle.html#c88e920577ea17bfc3f63d350cd6c4fc">get</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;
<a name="l00570"></a>00570 
<a name="l00577"></a>00577                                 <a class="code" href="classyarp_1_1os_1_1eValue.html">eValue</a> * <a class="code" href="classyarp_1_1os_1_1eBottle.html#cada7f678e4d45e8b18be090d63a423f">getPtr</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;
<a name="l00578"></a>00578 
<a name="l00585"></a>00585                                 <a class="code" href="classyarp_1_1os_1_1eValue.html">eValue</a> * <a class="code" href="classyarp_1_1os_1_1eBottle.html#cada7f678e4d45e8b18be090d63a423f">getPtr</a>(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i);
<a name="l00586"></a>00586 
<a name="l00592"></a>00592                                 std::string <a class="code" href="classyarp_1_1os_1_1eBottle.html#9dd74362165c31d116f8dd59ae063413">toString</a>() <span class="keyword">const</span>;
<a name="l00593"></a>00593 
<a name="l00600"></a>00600                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#3874e3aaaf313225a6b1f894bba046bd">fromString</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * s);
<a name="l00601"></a>00601 
<a name="l00607"></a>00607                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#3874e3aaaf313225a6b1f894bba046bd">fromString</a>(<span class="keyword">const</span> std::string&amp; s);
<a name="l00608"></a>00608 
<a name="l00614"></a>00614                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#3874e3aaaf313225a6b1f894bba046bd">fromString</a>(<span class="keyword">const</span> ConstString&amp; s);
<a name="l00615"></a>00615 
<a name="l00622"></a>00622                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#ed8df0ac3835e3a862e1dc82689dc773">fromBinary</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> * p, <span class="keyword">const</span> <span class="keywordtype">int</span> size);
<a name="l00623"></a>00623 
<a name="l00630"></a>00630                                 <span class="keyword">const</span> <span class="keywordtype">char</span> * <span class="keyword">const</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#24503a9f113ac00fa62900791b2b1baa">toBinary</a>(<span class="keywordtype">int</span> *size) <span class="keyword">const</span>;
<a name="l00631"></a>00631 
<a name="l00641"></a>00641                                 <span class="keywordtype">void</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#24503a9f113ac00fa62900791b2b1baa">toBinary</a>(<span class="keywordtype">char</span> * p) <span class="keyword">const</span>;
<a name="l00642"></a>00642 
<a name="l00650"></a>00650                                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#b9d526e78c46fba24905ffd2279c7c3f">getBinarySize</a>() <span class="keyword">const</span>;
<a name="l00651"></a>00651 
<a name="l00656"></a>00656                                 <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#757034798cd88a6e288d5f5cbceb0324">read</a>(ConnectionReader&amp; connection);
<a name="l00657"></a>00657 
<a name="l00662"></a>00662                                 <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html#720d074f044e53609c1c7704b605a6e9">write</a>(ConnectionWriter&amp; connection);
<a name="l00663"></a>00663 
<a name="l00664"></a>00664                         <span class="keyword">protected</span>:
<a name="l00665"></a>00665                                 std::vector&lt; eValue *&gt; values;
<a name="l00666"></a>00666                                 <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> global_size;
<a name="l00667"></a>00667                                 <span class="keyword">mutable</span> <span class="keywordtype">char</span> * toBinayPointer;
<a name="l00668"></a>00668 
<a name="l00669"></a>00669                                 <span class="comment">// private methods</span>
<a name="l00670"></a>00670                                 <span class="keywordtype">void</span> fillString(std::ostringstream * s, <span class="keyword">const</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> *b) <span class="keyword">const</span>;
<a name="l00671"></a>00671                                 <span class="keywordtype">void</span> fill(<span class="keyword">const</span> <a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> * b, <span class="keywordtype">int</span> &amp;s, <span class="keywordtype">char</span> * p = NULL) <span class="keyword">const</span>;
<a name="l00672"></a>00672                                 <span class="keywordtype">void</span> reconstruct(<a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> * b, <span class="keywordtype">int</span> &amp; s, <span class="keywordtype">char</span> * p) <span class="keyword">const</span>;
<a name="l00673"></a>00673                                 <span class="keywordtype">void</span> fromStr(<a class="code" href="classyarp_1_1os_1_1eBottle.html">eBottle</a> *b, <span class="keyword">const</span> <span class="keywordtype">char</span> * s2) <span class="keyword">const</span>;
<a name="l00674"></a>00674 
<a name="l00675"></a>00675                                 <span class="comment">// for debug only </span>
<a name="l00676"></a>00676                                 std::string content() <span class="keyword">const</span>;
<a name="l00677"></a>00677                 };
<a name="l00678"></a>00678 
<a name="l00679"></a>00679         }
<a name="l00680"></a>00680 }
<a name="l00681"></a>00681 
<a name="l00682"></a>00682 <span class="preprocessor">#endif </span><span class="comment">/*YARPBOTTLE_H_*/</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Mon Jun 16 11:59:03 2008 for URUS by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.1 </small></address>
</body>
</html>
